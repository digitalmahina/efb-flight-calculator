// Cache System Test - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
import SmartCache from './smart-cache.js';
import CacheDependencies from './cache-dependencies.js';
import PredictiveCache from './predictive-cache.js';
import CacheMetrics from './cache-metrics.js';
import EFBCache from './efb-cache.js';

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class CacheSystemTest {
    constructor() {
        this.testResults = [];
        this.passedTests = 0;
        this.failedTests = 0;
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
     */
    async runAllTests() {
        console.log('üöÄ Starting Cache System Tests...\n');
        
        try {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π SmartCache
            await this.testSmartCache();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            await this.testCacheDependencies();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            await this.testPredictiveCache();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            await this.testCacheMetrics();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º EFB –∫—ç—à
            await this.testEFBCache();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            await this.testIntegration();
            
            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.printResults();
            
        } catch (error) {
            console.error('‚ùå Test suite failed:', error);
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SmartCache
     */
    async testSmartCache() {
        console.log('üì¶ Testing SmartCache...');
        
        const cache = new SmartCache({
            defaultTTL: 1000,
            maxSize: 10,
            enableMetrics: true
        });
        
        // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        this.runTest('SmartCache: Basic Operations', () => {
            cache.set('test1', { data: 'value1' });
            const result = cache.get('test1');
            return result && result.data === 'value1';
        });
        
        // –¢–µ—Å—Ç 2: TTL
        this.runTest('SmartCache: TTL Expiration', async () => {
            cache.set('test2', { data: 'value2' }, { ttl: 100 });
            await this.sleep(150);
            const result = cache.get('test2');
            return result === null;
        });
        
        // –¢–µ—Å—Ç 3: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π TTL
        this.runTest('SmartCache: Adaptive TTL', () => {
            // –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–∏–π TTL
            for (let i = 0; i < 5; i++) {
                cache.get('test1');
            }
            const stats = cache.getStats();
            return stats.hitRate > 0;
        });
        
        // –¢–µ—Å—Ç 4: –í—ã—Ç–µ—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        this.runTest('SmartCache: Size Eviction', () => {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à
            for (let i = 0; i < 15; i++) {
                cache.set(`key${i}`, { data: `value${i}` });
            }
            const stats = cache.getStats();
            return stats.cacheSize <= 10;
        });
        
        // –¢–µ—Å—Ç 5: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è
        this.runTest('SmartCache: Invalidation', () => {
            cache.set('test3', { data: 'value3' });
            cache.invalidate('test3');
            const result = cache.get('test3');
            return result === null;
        });
        
        cache.destroy();
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
     */
    async testCacheDependencies() {
        console.log('üîó Testing Cache Dependencies...');
        
        const cache = new SmartCache();
        const dependencies = new CacheDependencies();
        
        // –¢–µ—Å—Ç 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        this.runTest('Dependencies: Set Dependencies', () => {
            dependencies.setDependencies('key1', ['dep1', 'dep2']);
            const info = dependencies.getDependencyInfo();
            return info.dependencies.key1 && info.dependencies.key1.includes('dep1');
        });
        
        // –¢–µ—Å—Ç 2: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        this.runTest('Dependencies: Invalidation by Dependency', () => {
            cache.set('key1', { data: 'value1' });
            dependencies.setDependencies('key1', ['dep1']);
            dependencies.invalidateByDependency('dep1');
            const result = cache.get('key1');
            return result === null;
        });
        
        // –¢–µ—Å—Ç 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        this.runTest('Dependencies: Auto Detection', () => {
            const deps = dependencies.autoDetectDependencies('route:waypoint:distance');
            return deps.includes('route') && deps.includes('waypoints');
        });
        
        cache.destroy();
        dependencies.destroy();
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async testPredictiveCache() {
        console.log('üîÆ Testing Predictive Cache...');
        
        const predictive = new PredictiveCache();
        
        // –¢–µ—Å—Ç 1: –ó–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.runTest('Predictive: Record User Actions', () => {
            predictive.recordUserAction('route_loaded', { routeId: 'test' });
            const stats = predictive.getStats();
            return stats.predictions >= 0;
        });
        
        // –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        this.runTest('Predictive: Sequence Analysis', () => {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π
            predictive.recordUserAction('route_loaded', { routeId: 'test1' });
            predictive.recordUserAction('waypoint_selected', { waypoint: 'wp1' });
            predictive.recordUserAction('map_zoomed', { zoom: 10 });
            
            const stats = predictive.getStats();
            return stats.activeUsers > 0;
        });
        
        // –¢–µ—Å—Ç 3: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        this.runTest('Predictive: Predictions', () => {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            for (let i = 0; i < 3; i++) {
                predictive.recordUserAction('route_loaded', { routeId: 'test' });
                predictive.recordUserAction('waypoint_selected', { waypoint: 'wp1' });
            }
            
            const stats = predictive.getStats();
            return stats.predictions > 0;
        });
        
        predictive.destroy();
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
     */
    async testCacheMetrics() {
        console.log('üìä Testing Cache Metrics...');
        
        const cache = new SmartCache({ enableMetrics: true });
        const metrics = new CacheMetrics();
        
        // –¢–µ—Å—Ç 1: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ø–∞–¥–∞–Ω–∏–π
        this.runTest('Metrics: Hit Tracking', () => {
            cache.set('test1', { data: 'value1' });
            cache.get('test1');
            const stats = metrics.getStats();
            return stats.hits > 0;
        });
        
        // –¢–µ—Å—Ç 2: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–º–∞—Ö–æ–≤
        this.runTest('Metrics: Miss Tracking', () => {
            cache.get('nonexistent');
            const stats = metrics.getStats();
            return stats.misses > 0;
        });
        
        // –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç hit rate
        this.runTest('Metrics: Hit Rate Calculation', () => {
            const stats = metrics.getStats();
            return stats.hitRate >= 0 && stats.hitRate <= 1;
        });
        
        // –¢–µ—Å—Ç 4: –ê–ª–µ—Ä—Ç—ã
        this.runTest('Metrics: Alerts', () => {
            // –°–æ–∑–¥–∞–µ–º —Å–∏—Ç—É–∞—Ü–∏—é —Å –Ω–∏–∑–∫–∏–º hit rate
            for (let i = 0; i < 10; i++) {
                cache.get('nonexistent' + i);
            }
            
            const alerts = metrics.getActiveAlerts();
            return alerts.length >= 0; // –ú–æ–∂–µ—Ç –±—ã—Ç—å 0 –∏–ª–∏ –±–æ–ª—å—à–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä–æ–≥–æ–≤
        });
        
        cache.destroy();
        metrics.destroy();
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EFB –∫—ç—à–∞
     */
    async testEFBCache() {
        console.log('‚úàÔ∏è Testing EFB Cache...');
        
        const efbCache = new EFBCache();
        
        // –¢–µ—Å—Ç 1: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
        this.runTest('EFB Cache: Route Caching', () => {
            const routeData = {
                id: 'test_route',
                waypoints: [
                    { name: 'WP1', lat: 68.0, lon: 33.0 },
                    { name: 'WP2', lat: 68.1, lon: 33.1 }
                ],
                distance: 100
            };
            
            efbCache.cacheRoute('test_route', routeData);
            const cached = efbCache.getRoute('test_route');
            return cached && cached.id === 'test_route';
        });
        
        // –¢–µ—Å—Ç 2: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        this.runTest('EFB Cache: Weather Caching', () => {
            const weatherData = {
                current: { temperature: 15, wind: { speed: 10 } },
                forecast: []
            };
            
            efbCache.cacheWeatherData({ lat: 68.0, lon: 33.0 }, weatherData);
            const cached = efbCache.getWeatherData({ lat: 68.0, lon: 33.0 });
            return cached && cached.current.temperature === 15;
        });
        
        // –¢–µ—Å—Ç 3: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤
        this.runTest('EFB Cache: Calculation Caching', () => {
            const calculationData = {
                id: 'distance_calc',
                parameters: { route: 'test_route' },
                result: { distance: 100, time: 30 }
            };
            
            efbCache.cacheCalculation('distance_calc', calculationData.parameters, calculationData.result);
            const cached = efbCache.getCalculation('distance_calc', calculationData.parameters);
            return cached && cached.result.distance === 100;
        });
        
        // –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.runTest('EFB Cache: Statistics', () => {
            const stats = efbCache.getAllStats();
            return stats && typeof stats === 'object';
        });
        
        efbCache.destroy();
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    async testIntegration() {
        console.log('üîß Testing Integration...');
        
        // –¢–µ—Å—Ç 1: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
        this.runTest('Integration: Global Cache', () => {
            if (window.globalCache) {
                window.globalCache.set('integration_test', { data: 'test' });
                const result = window.globalCache.get('integration_test');
                return result && result.data === 'test';
            }
            return false;
        });
        
        // –¢–µ—Å—Ç 2: EFB Application
        this.runTest('Integration: EFB Application', () => {
            if (window.EFBApplication) {
                const state = window.EFBApplication.getState();
                return state && typeof state === 'object';
            }
            return false;
        });
        
        // –¢–µ—Å—Ç 3: Event Bus
        this.runTest('Integration: Event Bus', () => {
            if (window.EventBus) {
                let eventReceived = false;
                window.EventBus.on('test_event', () => {
                    eventReceived = true;
                });
                window.EventBus.emit('test_event', {});
                return eventReceived;
            }
            return false;
        });
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
     */
    runTest(testName, testFunction) {
        try {
            const result = testFunction();
            if (result) {
                this.passedTests++;
                this.testResults.push({ name: testName, status: 'PASS', message: 'OK' });
                console.log(`  ‚úÖ ${testName}`);
            } else {
                this.failedTests++;
                this.testResults.push({ name: testName, status: 'FAIL', message: 'Test returned false' });
                console.log(`  ‚ùå ${testName}`);
            }
        } catch (error) {
            this.failedTests++;
            this.testResults.push({ name: testName, status: 'ERROR', message: error.message });
            console.log(`  üí• ${testName}: ${error.message}`);
        }
    }
    
    /**
     * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    printResults() {
        console.log('\nüìã Test Results Summary:');
        console.log(`‚úÖ Passed: ${this.passedTests}`);
        console.log(`‚ùå Failed: ${this.failedTests}`);
        console.log(`üìä Total: ${this.passedTests + this.failedTests}`);
        console.log(`üéØ Success Rate: ${((this.passedTests / (this.passedTests + this.failedTests)) * 100).toFixed(1)}%`);
        
        if (this.failedTests > 0) {
            console.log('\n‚ùå Failed Tests:');
            this.testResults
                .filter(test => test.status !== 'PASS')
                .forEach(test => {
                    console.log(`  - ${test.name}: ${test.message}`);
                });
        }
        
        console.log('\nüéâ Cache System Testing Complete!');
    }
    
    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    const testSuite = new CacheSystemTest();
    testSuite.runAllTests();
});

export default CacheSystemTest;
