/**
 * üßÆ –ì–õ–ê–í–ù–´–ô –ú–û–î–£–õ–¨ CALCULATIONS
 * 
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–ª–µ—Ç–∞ –≤ –µ–¥–∏–Ω—ã–π API
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–æ–±—ã—Ç–∏–π –∏ –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
 */

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–¥–º–æ–¥—É–ª–µ–π
import DistanceCalculator from './distance-calculator.js';
import TimeCalculator from './time-calculator.js';
import FuelCalculator from './fuel-calculator.js';
import RouteOptimizer from './route-optimizer.js';

// –ò–º–ø–æ—Ä—Ç –æ–±—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import EventBus from '../shared/event-bus.js';
import Utils from '../shared/utils.js';
import CONSTANTS from '../shared/constants.js';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –º–æ–¥—É–ª—è Calculations
 */
class CalculationsModule {
    constructor() {
        this.isInitialized = false;
        this.currentRoute = null;
        this.calculationCache = new Map();
        this.eventHandlers = new Map();
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.defaultParams = {
            cruiseSpeed: 200,      // –∫–º/—á
            fuelFlow: 600,         // –∫–≥/—á
            reserveFuel: 10,       // %
            windSpeed: 0,          // –∫–º/—á
            windDirection: 0       // –≥—Ä–∞–¥—É—Å—ã
        };
        
        // –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞
        this.flightParams = { ...this.defaultParams };
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    async init() {
        if (this.isInitialized) {
            return;
        }
        
        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupEventHandlers();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
            this.initializeCache();
            
            this.isInitialized = true;
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            EventBus.emit('calculations-module-ready', {
                module: 'calculations',
                version: '1.0.0',
                features: [
                    'distance-calculation',
                    'time-calculation',
                    'fuel-calculation',
                    'route-optimization',
                    'route-analysis'
                ]
            });
            
            console.log('‚úÖ Calculations module initialized successfully');
            
        } catch (error) {
            console.error('‚ùå Failed to initialize Calculations module:', error);
            EventBus.emit('calculations-module-error', { error: error.message });
            throw error;
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        this.eventHandlers.set('route-loaded', (data) => {
            this.handleRouteLoaded(data);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª–µ—Ç–∞
        this.eventHandlers.set('flight-params-changed', (data) => {
            this.handleFlightParamsChanged(data);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ—Å—á–µ—Ç
        this.eventHandlers.set('recalculate-route', (data) => {
            this.handleRecalculateRoute(data);
        });
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ EventBus
        this.eventHandlers.forEach((handler, event) => {
            EventBus.on(event, handler);
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
     */
    initializeCache() {
        this.calculationCache.clear();
        this.calculationCache.set('maxSize', 100);
        this.calculationCache.set('ttl', 300000); // 5 –º–∏–Ω—É—Ç
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
     */
    handleRouteLoaded(data) {
        try {
            this.currentRoute = data.route;
            const results = this.calculateRoute(this.currentRoute, this.flightParams);
            
            EventBus.emit('calculations-complete', {
                route: this.currentRoute,
                results: results,
                params: this.flightParams
            });
            
        } catch (error) {
            console.error('Error processing route:', error);
            EventBus.emit('calculation-error', { error: error.message });
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª–µ—Ç–∞
     */
    handleFlightParamsChanged(data) {
        try {
            this.flightParams = { ...this.flightParams, ...data.params };
            
            if (this.currentRoute) {
                const results = this.calculateRoute(this.currentRoute, this.flightParams);
                
                EventBus.emit('calculations-updated', {
                    route: this.currentRoute,
                    results: results,
                    params: this.flightParams
                });
            }
            
        } catch (error) {
            console.error('Error updating flight params:', error);
            EventBus.emit('calculation-error', { error: error.message });
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ—Å—á–µ—Ç
     */
    handleRecalculateRoute(data) {
        try {
            if (!this.currentRoute) {
                throw new Error('No route loaded for recalculation');
            }
            
            const params = data.params || this.flightParams;
            const results = this.calculateRoute(this.currentRoute, params);
            
            EventBus.emit('calculations-recalculated', {
                route: this.currentRoute,
                results: results,
                params: params
            });
            
        } catch (error) {
            console.error('Error recalculating route:', error);
            EventBus.emit('calculation-error', { error: error.message });
        }
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞
     */
    calculateRoute(waypoints, params = {}) {
        try {
            const flightParams = { ...this.flightParams, ...params };
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            const cacheKey = this.generateCacheKey(waypoints, flightParams);
            const cachedResult = this.getCachedResult(cacheKey);
            if (cachedResult) {
                return cachedResult;
            }
            
            // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
            const distanceResult = DistanceCalculator.calculateRouteDistance(waypoints);
            
            // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            const timeResult = TimeCalculator.calculateRouteTime(
                distanceResult.segments,
                flightParams.cruiseSpeed,
                flightParams.windSpeed > 0 ? {
                    speed: flightParams.windSpeed,
                    direction: flightParams.windDirection
                } : null
            );
            
            // –†–∞—Å—á–µ—Ç —Ç–æ–ø–ª–∏–≤–∞
            const fuelResult = FuelCalculator.calculateRouteFuel(
                timeResult.segments,
                flightParams.fuelFlow,
                flightParams.reserveFuel
            );
            
            // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
            const statistics = RouteOptimizer.analyzeRouteStatistics(distanceResult.segments);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            const safetyCheck = RouteOptimizer.checkRouteSafety(distanceResult.segments);
            
            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            const result = {
                // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                totalDistance: distanceResult.totalDistance,
                totalTime: timeResult.totalTime,
                totalFuel: fuelResult.totalFuel,
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                formattedTime: timeResult.formattedTotalTime,
                formattedDistance: `${distanceResult.totalDistance} –∫–º`,
                formattedFuel: `${fuelResult.totalFuel} –∫–≥`,
                
                // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                segments: distanceResult.segments.map((segment, index) => ({
                    ...segment,
                    time: timeResult.segments[index]?.time || 0,
                    fuel: fuelResult.segments[index]?.fuel || 0,
                    formattedTime: timeResult.segments[index]?.formattedTime || '00:00'
                })),
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                statistics: {
                    ...statistics,
                    fuelEfficiency: fuelResult.totalDistance > 0 ? 
                        Math.round((fuelResult.totalFuel / distanceResult.totalDistance) * 1000) / 1000 : 0,
                    averageSpeed: flightParams.cruiseSpeed,
                    fuelFlow: flightParams.fuelFlow
                },
                
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                safety: safetyCheck,
                
                // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
                params: flightParams,
                
                // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                calculatedAt: new Date().toISOString(),
                cacheKey: cacheKey
            };
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
            this.setCachedResult(cacheKey, result);
            
            return result;
            
        } catch (error) {
            console.error('Error calculating route:', error);
            throw error;
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
     */
    generateCacheKey(waypoints, params) {
        const waypointsHash = waypoints.map(wp => `${wp.lat},${wp.lon}`).join('|');
        const paramsHash = Object.keys(params)
            .sort()
            .map(key => `${key}:${params[key]}`)
            .join('|');
        
        return `${waypointsHash}#${paramsHash}`;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –∫—ç—à–∞
     */
    getCachedResult(key) {
        const cached = this.calculationCache.get(key);
        if (!cached) return null;
        
        const now = Date.now();
        if (now - cached.timestamp > this.calculationCache.get('ttl')) {
            this.calculationCache.delete(key);
            return null;
        }
        
        return cached.data;
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫—ç—à
     */
    setCachedResult(key, data) {
        // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω
        if (this.calculationCache.size >= this.calculationCache.get('maxSize')) {
            const firstKey = this.calculationCache.keys().next().value;
            this.calculationCache.delete(firstKey);
        }
        
        this.calculationCache.set(key, {
            data: data,
            timestamp: Date.now()
        });
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    validateInputs(waypoints, params) {
        const errors = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
        if (!Array.isArray(waypoints) || waypoints.length < 2) {
            errors.push('Waypoints must be an array with at least 2 points');
        }
        
        waypoints.forEach((waypoint, index) => {
            if (!waypoint.lat || !waypoint.lon) {
                errors.push(`Waypoint ${index + 1} missing coordinates`);
            }
            
            if (!DistanceCalculator.validateCoordinates(waypoint.lat, waypoint.lon)) {
                errors.push(`Waypoint ${index + 1} has invalid coordinates`);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (params.cruiseSpeed && (params.cruiseSpeed <= 0 || params.cruiseSpeed > 1000)) {
            errors.push('Cruise speed must be between 1 and 1000 km/h');
        }
        
        if (params.fuelFlow && (params.fuelFlow <= 0 || params.fuelFlow > 5000)) {
            errors.push('Fuel flow must be between 1 and 5000 kg/h');
        }
        
        if (params.reserveFuel && (params.reserveFuel < 0 || params.reserveFuel > 100)) {
            errors.push('Reserve fuel must be between 0 and 100%');
        }
        
        return {
            isValid: errors.length === 0,
            errors: errors
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è
     */
    getState() {
        return {
            isInitialized: this.isInitialized,
            currentRoute: this.currentRoute,
            flightParams: this.flightParams,
            cacheSize: this.calculationCache.size,
            defaultParams: this.defaultParams
        };
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è
     */
    setState(state) {
        if (state.flightParams) {
            this.flightParams = { ...this.flightParams, ...state.flightParams };
        }
        
        if (state.currentRoute) {
            this.currentRoute = state.currentRoute;
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª—è
     */
    async destroy() {
        try {
            // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.eventHandlers.forEach((handler, event) => {
                EventBus.off(event, handler);
            });
            
            // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
            this.calculationCache.clear();
            
            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.isInitialized = false;
            this.currentRoute = null;
            this.flightParams = { ...this.defaultParams };
            
            console.log('‚úÖ Calculations module destroyed successfully');
            
        } catch (error) {
            console.error('‚ùå Error destroying Calculations module:', error);
            throw error;
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–¥—É–ª—è
const calculationsModule = new CalculationsModule();

// –≠–∫—Å–ø–æ—Ä—Ç API –º–æ–¥—É–ª—è
export default {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    init: () => calculationsModule.init(),
    destroy: () => calculationsModule.destroy(),
    calculateRoute: (waypoints, params) => calculationsModule.calculateRoute(waypoints, params),
    
    // –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞
    calculateDistance: (lat1, lon1, lat2, lon2, unit) => 
        DistanceCalculator.calculateDistance(lat1, lon1, lat2, lon2, unit),
    calculateTime: (distance, speed) => 
        TimeCalculator.calculateFlightTime(distance, speed),
    calculateFuel: (time, fuelFlow) => 
        FuelCalculator.calculateFuelConsumption(time, fuelFlow),
    
    // –£—Ç–∏–ª–∏—Ç—ã
    formatTime: (hours) => TimeCalculator.formatTime(hours),
    validateInputs: (waypoints, params) => calculationsModule.validateInputs(waypoints, params),
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    getState: () => calculationsModule.getState(),
    setState: (state) => calculationsModule.setState(state),
    
    // –ü–æ–¥–º–æ–¥—É–ª–∏
    distance: DistanceCalculator,
    time: TimeCalculator,
    fuel: FuelCalculator,
    optimizer: RouteOptimizer,
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    constants: {
        DEFAULT_CRUISE_SPEED: 200,
        DEFAULT_FUEL_FLOW: 600,
        DEFAULT_RESERVE_FUEL: 10,
        EARTH_RADIUS_KM: 6371
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export {
    DistanceCalculator,
    TimeCalculator,
    FuelCalculator,
    RouteOptimizer
};
