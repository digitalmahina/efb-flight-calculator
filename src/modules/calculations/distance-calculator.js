/**
 * üßÆ –ú–û–î–£–õ–¨ –†–ê–°–ß–ï–¢–ê –†–ê–°–°–¢–û–Ø–ù–ò–ô
 * 
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
 * –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—É –•–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞ —Å—Ñ–µ—Ä–µ
 */

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
const EARTH_RADIUS_KM = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
const EARTH_RADIUS_NM = 3440; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–æ—Ä—Å–∫–∏—Ö –º–∏–ª—è—Ö
const EARTH_RADIUS_MI = 3959; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–∏–ª—è—Ö

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
 * @param {number} degrees - –£–≥–æ–ª –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
 * @returns {number} –£–≥–æ–ª –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
 */
function toRadians(degrees) {
    return degrees * (Math.PI / 180);
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞–¥–∏–∞–Ω—ã –≤ –≥—Ä–∞–¥—É—Å—ã
 * @param {number} radians - –£–≥–æ–ª –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
 * @returns {number} –£–≥–æ–ª –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
 */
function toDegrees(radians) {
    return radians * (180 / Math.PI);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 * @param {number} lat - –®–∏—Ä–æ—Ç–∞
 * @param {number} lon - –î–æ–ª–≥–æ—Ç–∞
 * @returns {boolean} true –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
 */
function validateCoordinates(lat, lon) {
    if (typeof lat !== 'number' || typeof lon !== 'number') {
        return false;
    }
    
    if (isNaN(lat) || isNaN(lon)) {
        return false;
    }
    
    if (lat < -90 || lat > 90) {
        return false;
    }
    
    if (lon < -180 || lon > 180) {
        return false;
    }
    
    return true;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ —Å—Ñ–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—É –•–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
 * @param {number} lat1 - –®–∏—Ä–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
 * @param {number} lon1 - –î–æ–ª–≥–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
 * @param {number} lat2 - –®–∏—Ä–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
 * @param {number} lon2 - –î–æ–ª–≥–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
 * @param {string} unit - –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è ('km', 'nm', 'mi')
 * @returns {number} –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
 */
function calculateDistance(lat1, lon1, lat2, lon2, unit = 'km') {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!validateCoordinates(lat1, lon1) || !validateCoordinates(lat2, lon2)) {
        throw new Error('Invalid coordinates provided');
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ä–∞–¥–∏–∞–Ω—ã
    const lat1Rad = toRadians(lat1);
    const lon1Rad = toRadians(lon1);
    const lat2Rad = toRadians(lat2);
    const lon2Rad = toRadians(lon2);
    
    // –†–∞–∑–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    const deltaLat = lat2Rad - lat1Rad;
    const deltaLon = lon2Rad - lon1Rad;
    
    // –§–æ—Ä–º—É–ª–∞ –•–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
    const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +
              Math.cos(lat1Rad) * Math.cos(lat2Rad) *
              Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);
    
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    
    // –í—ã–±–æ—Ä —Ä–∞–¥–∏—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    let radius;
    switch (unit.toLowerCase()) {
        case 'nm':
        case 'nautical':
            radius = EARTH_RADIUS_NM;
            break;
        case 'mi':
        case 'miles':
            radius = EARTH_RADIUS_MI;
            break;
        case 'km':
        case 'kilometers':
        default:
            radius = EARTH_RADIUS_KM;
            break;
    }
    
    const distance = radius * c;
    
    // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    return Math.round(distance * 1000000) / 1000000;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–∑–∏–º—É—Ç (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ) –æ—Ç –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –∫–æ –≤—Ç–æ—Ä–æ–π
 * @param {number} lat1 - –®–∏—Ä–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
 * @param {number} lon1 - –î–æ–ª–≥–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
 * @param {number} lat2 - –®–∏—Ä–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
 * @param {number} lon2 - –î–æ–ª–≥–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
 * @returns {number} –ê–∑–∏–º—É—Ç –≤ –≥—Ä–∞–¥—É—Å–∞—Ö (0-360)
 */
function calculateBearing(lat1, lon1, lat2, lon2) {
    if (!validateCoordinates(lat1, lon1) || !validateCoordinates(lat2, lon2)) {
        throw new Error('Invalid coordinates provided');
    }
    
    const lat1Rad = toRadians(lat1);
    const lat2Rad = toRadians(lat2);
    const deltaLonRad = toRadians(lon2 - lon1);
    
    const y = Math.sin(deltaLonRad) * Math.cos(lat2Rad);
    const x = Math.cos(lat1Rad) * Math.sin(lat2Rad) -
              Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(deltaLonRad);
    
    let bearing = toDegrees(Math.atan2(y, x));
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-360
    bearing = (bearing + 360) % 360;
    
    return Math.round(bearing * 100) / 100;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ –ø—É—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
 * @param {number} lat1 - –®–∏—Ä–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
 * @param {number} lon1 - –î–æ–ª–≥–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
 * @param {number} lat2 - –®–∏—Ä–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
 * @param {number} lon2 - –î–æ–ª–≥–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
 * @param {number} fraction - –î–æ–ª—è –ø—É—Ç–∏ (0-1)
 * @returns {Object} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–∏ {lat, lon}
 */
function calculateIntermediatePoint(lat1, lon1, lat2, lon2, fraction) {
    if (!validateCoordinates(lat1, lon1) || !validateCoordinates(lat2, lon2)) {
        throw new Error('Invalid coordinates provided');
    }
    
    if (fraction < 0 || fraction > 1) {
        throw new Error('Fraction must be between 0 and 1');
    }
    
    const lat1Rad = toRadians(lat1);
    const lon1Rad = toRadians(lon1);
    const lat2Rad = toRadians(lat2);
    const lon2Rad = toRadians(lon2);
    
    const deltaLonRad = lon2Rad - lon1Rad;
    
    const a = Math.sin((1 - fraction) * deltaLonRad) / Math.sin(deltaLonRad);
    const b = Math.sin(fraction * deltaLonRad) / Math.sin(deltaLonRad);
    
    const x = a * Math.cos(lat1Rad) * Math.cos(lon1Rad) + 
              b * Math.cos(lat2Rad) * Math.cos(lon2Rad);
    const y = a * Math.cos(lat1Rad) * Math.sin(lon1Rad) + 
              b * Math.cos(lat2Rad) * Math.sin(lon2Rad);
    const z = a * Math.sin(lat1Rad) + b * Math.sin(lat2Rad);
    
    const lat = Math.atan2(z, Math.sqrt(x * x + y * y));
    const lon = Math.atan2(y, x);
    
    return {
        lat: toDegrees(lat),
        lon: toDegrees(lon)
    };
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
 * @param {Array} waypoints - –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ [{lat, lon, name?}, ...]
 * @param {string} unit - –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ {totalDistance, segments}
 */
function calculateRouteDistance(waypoints, unit = 'km') {
    if (!Array.isArray(waypoints) || waypoints.length < 2) {
        throw new Error('Waypoints array must contain at least 2 points');
    }
    
    let totalDistance = 0;
    const segments = [];
    
    for (let i = 0; i < waypoints.length - 1; i++) {
        const current = waypoints[i];
        const next = waypoints[i + 1];
        
        if (!current.lat || !current.lon || !next.lat || !next.lon) {
            throw new Error(`Invalid coordinates in waypoint ${i + 1}`);
        }
        
        const distance = calculateDistance(
            current.lat, current.lon,
            next.lat, next.lon,
            unit
        );
        
        const bearing = calculateBearing(
            current.lat, current.lon,
            next.lat, next.lon
        );
        
        totalDistance += distance;
        
        segments.push({
            from: current.name || `WPT${i + 1}`,
            to: next.name || `WPT${i + 2}`,
            distance: Math.round(distance * 1000) / 1000,
            bearing: bearing,
            coordinates: {
                from: { lat: current.lat, lon: current.lon },
                to: { lat: next.lat, lon: next.lon }
            }
        });
    }
    
    return {
        totalDistance: Math.round(totalDistance * 1000) / 1000,
        segments: segments,
        unit: unit
    };
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
 * @param {number} distance - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
 * @param {string} fromUnit - –ò—Å—Ö–æ–¥–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞
 * @param {string} toUnit - –¶–µ–ª–µ–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞
 * @returns {number} –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
 */
function convertDistance(distance, fromUnit, toUnit) {
    const conversions = {
        'km': { 'nm': 0.539957, 'mi': 0.621371 },
        'nm': { 'km': 1.852, 'mi': 1.15078 },
        'mi': { 'km': 1.60934, 'nm': 0.868976 }
    };
    
    if (fromUnit === toUnit) {
        return distance;
    }
    
    if (!conversions[fromUnit] || !conversions[fromUnit][toUnit]) {
        throw new Error(`Conversion from ${fromUnit} to ${toUnit} not supported`);
    }
    
    return distance * conversions[fromUnit][toUnit];
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export {
    calculateDistance,
    calculateBearing,
    calculateIntermediatePoint,
    calculateRouteDistance,
    convertDistance,
    validateCoordinates,
    toRadians,
    toDegrees,
    EARTH_RADIUS_KM,
    EARTH_RADIUS_NM,
    EARTH_RADIUS_MI
};

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default {
    calculateDistance,
    calculateBearing,
    calculateIntermediatePoint,
    calculateRouteDistance,
    convertDistance,
    validateCoordinates,
    toRadians,
    toDegrees,
    constants: {
        EARTH_RADIUS_KM,
        EARTH_RADIUS_NM,
        EARTH_RADIUS_MI
    }
};
