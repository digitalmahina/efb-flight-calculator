/**
 * üõ£Ô∏è –ú–û–î–£–õ–¨ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ú–ê–†–®–†–£–¢–ê
 * 
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–æ–≤, –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏,
 * –ø–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π –∏ —Ä–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ—Ç–∞
 */

import { calculateDistance, calculateBearing } from './distance-calculator.js';
import { calculateFlightTime } from './time-calculator.js';
import { calculateFuelConsumption } from './fuel-calculator.js';

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
 * @param {Array} segments - –ú–∞—Å—Å–∏–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
 * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
 */
function analyzeRouteStatistics(segments) {
    if (!Array.isArray(segments) || segments.length === 0) {
        throw new Error('Segments array is required');
    }
    
    const distances = segments.map(seg => seg.distance);
    const bearings = segments.map(seg => seg.bearing || 0);
    
    const totalDistance = segments.reduce((sum, seg) => sum + seg.distance, 0);
    const averageDistance = totalDistance / segments.length;
    const longestSegment = Math.max(...distances);
    const shortestSegment = Math.min(...distances);
    
    // –ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    const bearingChanges = [];
    for (let i = 1; i < bearings.length; i++) {
        const change = Math.abs(bearings[i] - bearings[i-1]);
        bearingChanges.push(change > 180 ? 360 - change : change);
    }
    
    const averageBearingChange = bearingChanges.length > 0 
        ? bearingChanges.reduce((sum, change) => sum + change, 0) / bearingChanges.length 
        : 0;
    
    // –†–∞—Å—á–µ—Ç –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    const directDistance = calculateDirectDistance(segments);
    const efficiency = directDistance > 0 ? (directDistance / totalDistance) * 100 : 100;
    
    return {
        totalDistance: Math.round(totalDistance * 1000) / 1000,
        segmentCount: segments.length,
        averageDistance: Math.round(averageDistance * 1000) / 1000,
        longestSegment: Math.round(longestSegment * 1000) / 1000,
        shortestSegment: Math.round(shortestSegment * 1000) / 1000,
        averageBearingChange: Math.round(averageBearingChange * 100) / 100,
        routeEfficiency: Math.round(efficiency * 100) / 100,
        directDistance: Math.round(directDistance * 1000) / 1000
    };
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä—è–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∞
 * @param {Array} segments - –ú–∞—Å—Å–∏–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
 * @returns {number} –ü—Ä—è–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
 */
function calculateDirectDistance(segments) {
    if (!Array.isArray(segments) || segments.length === 0) {
        return 0;
    }
    
    const firstSegment = segments[0];
    const lastSegment = segments[segments.length - 1];
    
    if (!firstSegment.coordinates || !lastSegment.coordinates) {
        return 0;
    }
    
    return calculateDistance(
        firstSegment.coordinates.from.lat,
        firstSegment.coordinates.from.lon,
        lastSegment.coordinates.to.lat,
        lastSegment.coordinates.to.lon
    );
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–∞–ª–≥–æ—Ä–∏—Ç–º –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ—Å–µ–¥–∞)
 * @param {Array} waypoints - –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
 * @param {Object} startPoint - –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ {lat, lon}
 * @returns {Array} –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
 */
function optimizeRouteByDistance(waypoints, startPoint) {
    if (!Array.isArray(waypoints) || waypoints.length === 0) {
        throw new Error('Waypoints array is required');
    }
    
    if (!startPoint || !startPoint.lat || !startPoint.lon) {
        throw new Error('Start point is required');
    }
    
    const optimizedRoute = [];
    const remainingWaypoints = [...waypoints];
    let currentPoint = startPoint;
    
    while (remainingWaypoints.length > 0) {
        let nearestIndex = 0;
        let nearestDistance = calculateDistance(
            currentPoint.lat, currentPoint.lon,
            remainingWaypoints[0].lat, remainingWaypoints[0].lon
        );
        
        // –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π —Ç–æ—á–∫–∏
        for (let i = 1; i < remainingWaypoints.length; i++) {
            const distance = calculateDistance(
                currentPoint.lat, currentPoint.lon,
                remainingWaypoints[i].lat, remainingWaypoints[i].lon
            );
            
            if (distance < nearestDistance) {
                nearestDistance = distance;
                nearestIndex = i;
            }
        }
        
        const nearestWaypoint = remainingWaypoints[nearestIndex];
        optimizedRoute.push({
            ...nearestWaypoint,
            distanceFromPrevious: nearestDistance
        });
        
        currentPoint = nearestWaypoint;
        remainingWaypoints.splice(nearestIndex, 1);
    }
    
    return optimizedRoute;
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–µ—Ç–∞
 * @param {Array} waypoints - –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
 * @param {Object} startPoint - –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
 * @param {number} cruiseSpeed - –ö—Ä–µ–π—Å–µ—Ä—Å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∫–º/—á
 * @returns {Array} –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
function optimizeRouteByTime(waypoints, startPoint, cruiseSpeed) {
    if (typeof cruiseSpeed !== 'number' || cruiseSpeed <= 0) {
        throw new Error('Invalid cruise speed');
    }
    
    const optimizedRoute = optimizeRouteByDistance(waypoints, startPoint);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    return optimizedRoute.map((waypoint, index) => {
        const flightTime = calculateFlightTime(waypoint.distanceFromPrevious, cruiseSpeed);
        return {
            ...waypoint,
            flightTime: Math.round(flightTime * 10000) / 10000,
            cumulativeTime: index === 0 ? flightTime : 
                optimizedRoute.slice(0, index).reduce((sum, wp) => sum + wp.flightTime, 0) + flightTime
        };
    });
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥—É —Ç–æ–ø–ª–∏–≤–∞
 * @param {Array} waypoints - –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
 * @param {Object} startPoint - –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
 * @param {number} cruiseSpeed - –ö—Ä–µ–π—Å–µ—Ä—Å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∫–º/—á
 * @param {number} fuelFlow - –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –≤ –∫–≥/—á
 * @returns {Array} –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å —Ç–æ–ø–ª–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
function optimizeRouteByFuel(waypoints, startPoint, cruiseSpeed, fuelFlow) {
    if (typeof fuelFlow !== 'number' || fuelFlow <= 0) {
        throw new Error('Invalid fuel flow rate');
    }
    
    const optimizedRoute = optimizeRouteByTime(waypoints, startPoint, cruiseSpeed);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    return optimizedRoute.map((waypoint, index) => {
        const fuelConsumption = calculateFuelConsumption(waypoint.flightTime, fuelFlow);
        return {
            ...waypoint,
            fuelConsumption: Math.round(fuelConsumption * 1000) / 1000,
            cumulativeFuel: index === 0 ? fuelConsumption : 
                optimizedRoute.slice(0, index).reduce((sum, wp) => sum + wp.fuelConsumption, 0) + fuelConsumption
        };
    });
}

/**
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
 * @param {Array} routes - –ú–∞—Å—Å–∏–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è {cruiseSpeed, fuelFlow}
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
function compareRoutes(routes, params) {
    if (!Array.isArray(routes) || routes.length < 2) {
        throw new Error('At least 2 routes required for comparison');
    }
    
    const { cruiseSpeed = 200, fuelFlow = 600 } = params;
    
    const routeComparisons = routes.map((route, index) => {
        const totalDistance = route.reduce((sum, segment) => sum + segment.distance, 0);
        const totalTime = route.reduce((sum, segment) => sum + segment.time, 0);
        const totalFuel = route.reduce((sum, segment) => sum + segment.fuel, 0);
        
        return {
            routeIndex: index,
            totalDistance: Math.round(totalDistance * 1000) / 1000,
            totalTime: Math.round(totalTime * 10000) / 10000,
            totalFuel: Math.round(totalFuel * 1000) / 1000,
            efficiency: totalDistance > 0 ? Math.round((totalDistance / totalTime) * 100) / 100 : 0,
            fuelEfficiency: totalDistance > 0 ? Math.round((totalFuel / totalDistance) * 1000) / 1000 : 0
        };
    });
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    const byDistance = [...routeComparisons].sort((a, b) => a.totalDistance - b.totalDistance);
    const byTime = [...routeComparisons].sort((a, b) => a.totalTime - b.totalTime);
    const byFuel = [...routeComparisons].sort((a, b) => a.totalFuel - b.totalFuel);
    const byEfficiency = [...routeComparisons].sort((a, b) => b.efficiency - a.efficiency);
    
    return {
        routes: routeComparisons,
        bestByDistance: byDistance[0],
        bestByTime: byTime[0],
        bestByFuel: byFuel[0],
        bestByEfficiency: byEfficiency[0],
        comparison: {
            distanceRange: Math.round((byDistance[byDistance.length - 1].totalDistance - byDistance[0].totalDistance) * 1000) / 1000,
            timeRange: Math.round((byTime[byTime.length - 1].totalTime - byTime[0].totalTime) * 10000) / 10000,
            fuelRange: Math.round((byFuel[byFuel.length - 1].totalFuel - byFuel[0].totalFuel) * 1000) / 1000
        }
    };
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
 * @param {Array} waypoints - –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
 * @param {Object} startPoint - –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
 * @param {Object} endPoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
 * @param {number} maxDeviation - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø—Ä—è–º–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –∫–º
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
function findAlternativeRoutes(waypoints, startPoint, endPoint, maxDeviation = 50) {
    if (!startPoint || !endPoint) {
        throw new Error('Start and end points are required');
    }
    
    const directDistance = calculateDistance(
        startPoint.lat, startPoint.lon,
        endPoint.lat, endPoint.lon
    );
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    const validWaypoints = waypoints.filter(waypoint => {
        const distanceToStart = calculateDistance(
            startPoint.lat, startPoint.lon,
            waypoint.lat, waypoint.lon
        );
        const distanceToEnd = calculateDistance(
            waypoint.lat, waypoint.lon,
            endPoint.lat, endPoint.lon
        );
        
        return (distanceToStart + distanceToEnd) <= (directDistance + maxDeviation);
    });
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –º–∞—Ä—à—Ä—É—Ç–æ–≤
    const alternativeRoutes = [];
    
    // –ú–∞—Ä—à—Ä—É—Ç 1: –ü—Ä—è–º–æ–π
    alternativeRoutes.push([
        { ...startPoint, name: 'START' },
        { ...endPoint, name: 'END' }
    ]);
    
    // –ú–∞—Ä—à—Ä—É—Ç 2: –ß–µ—Ä–µ–∑ –æ–¥–Ω—É –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
    validWaypoints.forEach(waypoint => {
        alternativeRoutes.push([
            { ...startPoint, name: 'START' },
            { ...waypoint },
            { ...endPoint, name: 'END' }
        ]);
    });
    
    // –ú–∞—Ä—à—Ä—É—Ç 3: –ß–µ—Ä–µ–∑ –¥–≤–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫)
    if (validWaypoints.length >= 2) {
        for (let i = 0; i < validWaypoints.length - 1; i++) {
            for (let j = i + 1; j < validWaypoints.length; j++) {
                alternativeRoutes.push([
                    { ...startPoint, name: 'START' },
                    { ...validWaypoints[i] },
                    { ...validWaypoints[j] },
                    { ...endPoint, name: 'END' }
                ]);
            }
        }
    }
    
    return alternativeRoutes;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –ø–æ–ª–µ—Ç–∞
 * @param {number} distance - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ—Ç–∞ –≤ –∫–º
 * @param {number} aircraftType - –¢–∏–ø —Å–∞–º–æ–ª–µ—Ç–∞ (1: –ª–µ–≥–∫–∏–π, 2: —Å—Ä–µ–¥–Ω–∏–π, 3: —Ç—è–∂–µ–ª—ã–π)
 * @returns {Object} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã—Å–æ—Ç–µ –ø–æ–ª–µ—Ç–∞
 */
function calculateOptimalAltitude(distance, aircraftType = 2) {
    if (typeof distance !== 'number' || distance <= 0) {
        throw new Error('Invalid distance');
    }
    
    if (aircraftType < 1 || aircraftType > 3) {
        throw new Error('Aircraft type must be 1, 2, or 3');
    }
    
    const altitudeRanges = {
        1: { min: 1000, max: 3000, optimal: 2000 }, // –õ–µ–≥–∫–∏–π —Å–∞–º–æ–ª–µ—Ç
        2: { min: 2000, max: 6000, optimal: 4000 }, // –°—Ä–µ–¥–Ω–∏–π —Å–∞–º–æ–ª–µ—Ç
        3: { min: 3000, max: 12000, optimal: 8000 } // –¢—è–∂–µ–ª—ã–π —Å–∞–º–æ–ª–µ—Ç
    };
    
    const range = altitudeRanges[aircraftType];
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã—Å–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    let recommendedAltitude = range.optimal;
    
    if (distance < 100) {
        recommendedAltitude = range.min;
    } else if (distance > 1000) {
        recommendedAltitude = range.max;
    } else {
        // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
        const factor = (distance - 100) / 900;
        recommendedAltitude = range.min + (range.max - range.min) * factor;
    }
    
    return {
        recommendedAltitude: Math.round(recommendedAltitude),
        minAltitude: range.min,
        maxAltitude: range.max,
        distance: distance,
        aircraftType: aircraftType
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞
 * @param {Array} segments - –ú–∞—Å—Å–∏–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
 * @param {Object} constraints - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
function checkRouteSafety(segments, constraints = {}) {
    const {
        maxSegmentDistance = 500, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ –∫–º
        maxBearingChange = 90,    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
        minDistanceFromObstacles = 10 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –≤ –∫–º
    } = constraints;
    
    const warnings = [];
    const errors = [];
    
    segments.forEach((segment, index) => {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞
        if (segment.distance > maxSegmentDistance) {
            warnings.push(`Segment ${index + 1}: Distance ${segment.distance}km exceeds maximum ${maxSegmentDistance}km`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
        if (index > 0) {
            const bearingChange = Math.abs(segment.bearing - segments[index - 1].bearing);
            const actualChange = bearingChange > 180 ? 360 - bearingChange : bearingChange;
            
            if (actualChange > maxBearingChange) {
                warnings.push(`Segment ${index + 1}: Bearing change ${actualChange}¬∞ exceeds maximum ${maxBearingChange}¬∞`);
            }
        }
    });
    
    return {
        isSafe: errors.length === 0,
        warnings: warnings,
        errors: errors,
        segmentCount: segments.length,
        totalDistance: segments.reduce((sum, seg) => sum + seg.distance, 0)
    };
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export {
    analyzeRouteStatistics,
    calculateDirectDistance,
    optimizeRouteByDistance,
    optimizeRouteByTime,
    optimizeRouteByFuel,
    compareRoutes,
    findAlternativeRoutes,
    calculateOptimalAltitude,
    checkRouteSafety
};

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default {
    analyzeRouteStatistics,
    calculateDirectDistance,
    optimizeRouteByDistance,
    optimizeRouteByTime,
    optimizeRouteByFuel,
    compareRoutes,
    findAlternativeRoutes,
    calculateOptimalAltitude,
    checkRouteSafety
};
