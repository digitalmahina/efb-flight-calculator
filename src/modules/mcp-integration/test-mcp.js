// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è MCP-INTEGRATION
class MCPTester {
    constructor() {
        this.testResults = [];
        this.passedTests = 0;
        this.failedTests = 0;
    }
    
    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    async runAllTests() {
        console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è MCP-INTEGRATION...\n');
        
        try {
            // –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞
            await this.testMCPClientInit();
            
            // –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º
            await this.testServerConnections();
            
            // –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            await this.testToolsLoading();
            
            // –¢–µ—Å—Ç 4: –í—ã–∑–æ–≤ Figma –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            await this.testFigmaTools();
            
            // –¢–µ—Å—Ç 5: –í—ã–∑–æ–≤ SVG Maker –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            await this.testSVGMakerTools();
            
            // –¢–µ—Å—Ç 6: –í—ã–∑–æ–≤ Web Search –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            await this.testWebSearchTools();
            
            // –¢–µ—Å—Ç 7: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            await this.testCaching();
            
            // –¢–µ—Å—Ç 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            await this.testErrorHandling();
            
            // –¢–µ—Å—Ç 9: –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
            await this.testEventSystem();
            
            // –¢–µ—Å—Ç 10: –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            await this.testCleanup();
            
            // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            this.printResults();
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
        }
    }
    
    // –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞
    async testMCPClientInit() {
        console.log('üîß –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MCPClient –¥–æ—Å—Ç—É–ø–µ–Ω
            if (typeof window.MCPClient === 'undefined') {
                throw new Error('MCPClient –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
            await window.MCPClient.init();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (!window.MCPClient.isInitialized) {
                throw new Error('MCPClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            
            this.addTestResult('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞', true, '–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            this.addTestResult('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞', false, error.message);
        }
    }
    
    // –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º
    async testServerConnections() {
        console.log('üîó –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º');
        
        try {
            const connections = window.MCPClient.getConnections();
            
            if (connections.length === 0) {
                throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º
            const expectedServers = ['figma', 'svgmaker', 'websearch'];
            const connectedServers = connections.map(conn => conn.id);
            
            for (const server of expectedServers) {
                if (!connectedServers.includes(server)) {
                    throw new Error(`–°–µ—Ä–≤–µ—Ä ${server} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω`);
                }
            }
            
            this.addTestResult('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º', true, `–ü–æ–¥–∫–ª—é—á–µ–Ω–æ ${connections.length} —Å–µ—Ä–≤–µ—Ä–æ–≤: ${connectedServers.join(', ')}`);
            
        } catch (error) {
            this.addTestResult('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º', false, error.message);
        }
    }
    
    // –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    async testToolsLoading() {
        console.log('üõ†Ô∏è –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
        
        try {
            const tools = window.MCPClient.getAvailableTools();
            
            if (tools.length === 0) {
                throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            const expectedTools = [
                'get_figma_data',
                'download_figma_images',
                'svgmaker_generate',
                'svgmaker_edit',
                'svgmaker_convert',
                'web_search'
            ];
            
            const availableToolNames = tools.map(tool => tool.name);
            const missingTools = expectedTools.filter(tool => !availableToolNames.includes(tool));
            
            if (missingTools.length > 0) {
                throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${missingTools.join(', ')}`);
            }
            
            this.addTestResult('–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', true, `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tools.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
            
        } catch (error) {
            this.addTestResult('–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', false, error.message);
        }
    }
    
    // –¢–µ—Å—Ç 4: –í—ã–∑–æ–≤ Figma –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    async testFigmaTools() {
        console.log('üé® –¢–µ—Å—Ç 4: –í—ã–∑–æ–≤ Figma –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
        
        try {
            // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Figma
            const figmaResult = await window.MCPClient.callTool('get_figma_data', {
                fileKey: 'test-file-key',
                nodeId: '1:2',
                depth: 1
            });
            
            if (!figmaResult.success) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Figma');
            }
            
            // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const imagesResult = await window.MCPClient.callTool('download_figma_images', {
                fileKey: 'test-file-key',
                nodes: [{ nodeId: '1:2', fileName: 'test.svg' }],
                localPath: '/test/path',
                pngScale: 2
            });
            
            if (!imagesResult.success) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Figma');
            }
            
            this.addTestResult('–í—ã–∑–æ–≤ Figma –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', true, 'Figma –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            
        } catch (error) {
            this.addTestResult('–í—ã–∑–æ–≤ Figma –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', false, error.message);
        }
    }
    
    // –¢–µ—Å—Ç 5: –í—ã–∑–æ–≤ SVG Maker –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    async testSVGMakerTools() {
        console.log('üñºÔ∏è –¢–µ—Å—Ç 5: –í—ã–∑–æ–≤ SVG Maker –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
        
        try {
            // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SVG
            const generateResult = await window.MCPClient.callTool('svgmaker_generate', {
                prompt: 'Test aviation icon',
                output_path: '/test/icon.svg',
                quality: 'medium'
            });
            
            if (!generateResult.success) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SVG');
            }
            
            // –¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SVG
            const editResult = await window.MCPClient.callTool('svgmaker_edit', {
                input_path: '/test/input.svg',
                prompt: 'Make it blue',
                output_path: '/test/output.svg',
                quality: 'high'
            });
            
            if (!editResult.success) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ SVG');
            }
            
            // –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            const convertResult = await window.MCPClient.callTool('svgmaker_convert', {
                input_path: '/test/image.png',
                output_path: '/test/image.svg'
            });
            
            if (!convertResult.success) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ SVG');
            }
            
            this.addTestResult('–í—ã–∑–æ–≤ SVG Maker –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', true, 'SVG Maker –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            
        } catch (error) {
            this.addTestResult('–í—ã–∑–æ–≤ SVG Maker –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', false, error.message);
        }
    }
    
    // –¢–µ—Å—Ç 6: –í—ã–∑–æ–≤ Web Search –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    async testWebSearchTools() {
        console.log('üîç –¢–µ—Å—Ç 6: –í—ã–∑–æ–≤ Web Search –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
        
        try {
            const searchResult = await window.MCPClient.callTool('web_search', {
                search_term: 'aviation weather data'
            });
            
            if (!searchResult.success) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–±-–ø–æ–∏—Å–∫–µ');
            }
            
            if (!searchResult.results || searchResult.results.length === 0) {
                throw new Error('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞');
            }
            
            this.addTestResult('–í—ã–∑–æ–≤ Web Search –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', true, 'Web Search —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            
        } catch (error) {
            this.addTestResult('–í—ã–∑–æ–≤ Web Search –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', false, error.message);
        }
    }
    
    // –¢–µ—Å—Ç 7: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    async testCaching() {
        console.log('üíæ –¢–µ—Å—Ç 7: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ');
        
        try {
            const startTime = Date.now();
            
            // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
            await window.MCPClient.callTool('web_search', {
                search_term: 'test caching'
            });
            
            const firstCallTime = Date.now() - startTime;
            
            // –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)
            const secondStartTime = Date.now();
            await window.MCPClient.callTool('web_search', {
                search_term: 'test caching'
            });
            
            const secondCallTime = Date.now() - secondStartTime;
            
            // –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à)
            if (secondCallTime >= firstCallTime) {
                console.warn('‚ö†Ô∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å (–≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –Ω–µ –±—ã—Å—Ç—Ä–µ–µ)');
            }
            
            this.addTestResult('–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ', true, `–ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: ${firstCallTime}–º—Å, –≤—Ç–æ—Ä–æ–π: ${secondCallTime}–º—Å`);
            
        } catch (error) {
            this.addTestResult('–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ', false, error.message);
        }
    }
    
    // –¢–µ—Å—Ç 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    async testErrorHandling() {
        console.log('‚ùå –¢–µ—Å—Ç 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
        
        try {
            // –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º
            try {
                await window.MCPClient.callTool('non_existent_tool', {});
                throw new Error('–û—à–∏–±–∫–∞: –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ');
            } catch (error) {
                if (!error.message.includes('not found')) {
                    throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ');
                }
            }
            
            // –¢–µ—Å—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            try {
                await window.MCPClient.callTool('get_figma_data', {});
                throw new Error('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –≤—ã–∑–≤–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ');
            } catch (error) {
                if (!error.message.includes('required')) {
                    throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
                }
            }
            
            this.addTestResult('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫', true, '–û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            
        } catch (error) {
            this.addTestResult('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫', false, error.message);
        }
    }
    
    // –¢–µ—Å—Ç 9: –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
    async testEventSystem() {
        console.log('üì° –¢–µ—Å—Ç 9: –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π');
        
        try {
            let eventReceived = false;
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
            const eventHandler = (data) => {
                eventReceived = true;
                console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:', data);
            };
            
            if (window.EventBus) {
                window.EventBus.on('mcp-tool-call', eventHandler);
                
                // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                await window.MCPClient.callTool('web_search', {
                    search_term: 'test event system'
                });
                
                // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
                await new Promise(resolve => setTimeout(resolve, 100));
                
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                window.EventBus.off('mcp-tool-call', eventHandler);
                
                if (!eventReceived) {
                    throw new Error('–°–æ–±—ã—Ç–∏–µ –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ');
                }
            } else {
                throw new Error('EventBus –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            }
            
            this.addTestResult('–°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π', true, '–°–æ–±—ã—Ç–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            
        } catch (error) {
            this.addTestResult('–°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π', false, error.message);
        }
    }
    
    // –¢–µ—Å—Ç 10: –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    async testCleanup() {
        console.log('üßπ –¢–µ—Å—Ç 10: –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');
        
        try {
            // –û—á–∏—â–∞–µ–º –∫—ç—à
            window.MCPClient.clearCache();
            
            // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤
            await window.MCPClient.disconnect();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å
            const connections = window.MCPClient.getConnections();
            if (connections.length > 0) {
                throw new Error('–ù–µ –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—á–∏—â–µ–Ω—ã
            const tools = window.MCPClient.getAvailableTools();
            if (tools.length > 0) {
                throw new Error('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –æ—á–∏—â–µ–Ω—ã');
            }
            
            this.addTestResult('–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤', true, '–†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            
        } catch (error) {
            this.addTestResult('–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤', false, error.message);
        }
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
    addTestResult(testName, passed, message) {
        const result = {
            name: testName,
            passed,
            message,
            timestamp: new Date().toISOString()
        };
        
        this.testResults.push(result);
        
        if (passed) {
            this.passedTests++;
            console.log(`‚úÖ ${testName}: ${message}`);
        } else {
            this.failedTests++;
            console.log(`‚ùå ${testName}: ${message}`);
        }
        
        console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    }
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    printResults() {
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–£–õ–Ø MCP-INTEGRATION');
        console.log('='.repeat(60));
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.passedTests}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.failedTests}`);
        console.log(`üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((this.passedTests / (this.passedTests + this.failedTests)) * 100)}%`);
        console.log('');
        
        if (this.failedTests > 0) {
            console.log('‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:');
            this.testResults
                .filter(result => !result.passed)
                .forEach(result => {
                    console.log(`  ‚Ä¢ ${result.name}: ${result.message}`);
                });
            console.log('');
        }
        
        console.log('üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        this.testResults.forEach((result, index) => {
            const status = result.passed ? '‚úÖ' : '‚ùå';
            console.log(`${index + 1}. ${status} ${result.name}`);
            console.log(`   ${result.message}`);
            console.log(`   –í—Ä–µ–º—è: ${result.timestamp}`);
            console.log('');
        });
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (this.failedTests === 0) {
            console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ú–æ–¥—É–ª—å MCP-INTEGRATION –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
        } else {
            console.log('‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã.');
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runMCPTests() {
    const tester = new MCPTester();
    await tester.runAllTests();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.MCPTester = MCPTester;
window.runMCPTests = runMCPTests;

export default MCPTester;
