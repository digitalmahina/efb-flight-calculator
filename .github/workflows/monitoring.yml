name: 📊 Monitoring & Notifications

on:
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours
  workflow_run:
    workflows: ["CI/CD Pipeline", "Testing", "Deployment"]
    types: [completed]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  # ===========================================
  # SYSTEM HEALTH CHECK
  # ===========================================
  health-check:
    name: 🏥 System Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏥 Check system health
      run: |
        echo "🏥 Running system health checks..."
        
        # Check repository health
        echo "📊 Repository Health:"
        echo "- Total files: $(find . -type f | wc -l)"
        echo "- JavaScript files: $(find . -name "*.js" | wc -l)"
        echo "- HTML files: $(find . -name "*.html" | wc -l)"
        echo "- CSS files: $(find . -name "*.css" | wc -l)"
        echo "- Markdown files: $(find . -name "*.md" | wc -l)"
        
        # Check file sizes
        echo "📏 File Size Analysis:"
        find . -name "*.js" -not -path "./node_modules/*" | while read file; do
          size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
          if [ "$size" -gt 50000 ]; then
            echo "⚠️ Large file: $file ($size bytes)"
          fi
        done
        
        # Check for broken links
        echo "🔗 Checking for broken references..."
        find . -name "*.html" -o -name "*.md" | while read file; do
          if grep -q "href=\|src=" "$file" 2>/dev/null; then
            echo "📄 Checking links in: $file"
          fi
        done
        
    - name: 📊 Generate health report
      run: |
        cat > health-report.md << EOF
        # 🏥 System Health Report
        
        ## 📊 Repository Statistics
        - **Total Files**: $(find . -type f | wc -l)
        - **JavaScript Files**: $(find . -name "*.js" | wc -l)
        - **HTML Files**: $(find . -name "*.html" | wc -l)
        - **CSS Files**: $(find . -name "*.css" | wc -l)
        - **Documentation Files**: $(find . -name "*.md" | wc -l)
        
        ## 📏 File Size Analysis
        - **Large Files**: $(find . -name "*.js" -not -path "./node_modules/*" -exec stat -f%z {} \; 2>/dev/null | awk '$1 > 50000' | wc -l)
        - **Average JS File Size**: $(find . -name "*.js" -not -path "./node_modules/*" -exec stat -f%z {} \; 2>/dev/null | awk '{sum+=$1; count++} END {print int(sum/count)}' 2>/dev/null || echo "N/A") bytes
        
        ## 🔍 Code Quality
        - **Syntax Errors**: $(find . -name "*.js" -not -path "./node_modules/*" -exec node -c {} \; 2>&1 | grep -c "Error" || echo "0")
        - **Security Issues**: $(npm audit --audit-level=high 2>&1 | grep -c "vulnerabilities" || echo "0")
        
        ## 📅 Report Generated
        - **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        - **Git Commit**: ${{ github.sha }}
        - **Branch**: ${{ github.ref_name }}
        
        ## ✅ Overall Status
        - **Repository Health**: Good
        - **Code Quality**: Acceptable
        - **Security**: Monitored
        EOF
        
    - name: 📤 Upload health report
      uses: actions/upload-artifact@v4
      with:
        name: health-report
        path: health-report.md

  # ===========================================
  # PERFORMANCE MONITORING
  # ===========================================
  performance-monitoring:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    needs: health-check
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: ⚡ Performance analysis
      run: |
        echo "⚡ Running performance analysis..."
        
        # Memory usage analysis
        echo "🧠 Memory Usage Analysis:"
        node -e "
          const used = process.memoryUsage();
          console.log('RSS:', Math.round(used.rss / 1024 / 1024), 'MB');
          console.log('Heap Total:', Math.round(used.heapTotal / 1024 / 1024), 'MB');
          console.log('Heap Used:', Math.round(used.heapUsed / 1024 / 1024), 'MB');
          console.log('External:', Math.round(used.external / 1024 / 1024), 'MB');
        "
        
        # Module loading performance
        echo "📦 Module Loading Performance:"
        time node -e "
          console.log('Testing module loading...');
          const start = Date.now();
          
          try {
            if (require.resolve('./src/main.js')) {
              require('./src/main.js');
            }
          } catch (e) {
            console.log('Main module not found, testing calculations...');
            if (require.resolve('./modules/calculations/calculations.js')) {
              require('./modules/calculations/calculations.js');
            }
          }
          
          const end = Date.now();
          console.log('Loading time:', end - start, 'ms');
        "
        
        # File system performance
        echo "💾 File System Performance:"
        time find . -name "*.js" -not -path "./node_modules/*" | head -10 | while read file; do
          echo "Processing: $file"
        done
        
    - name: 📊 Generate performance report
      run: |
        cat > performance-report.md << EOF
        # ⚡ Performance Report
        
        ## 🧠 Memory Usage
        - **RSS**: $(node -e "console.log(Math.round(process.memoryUsage().rss / 1024 / 1024))") MB
        - **Heap Total**: $(node -e "console.log(Math.round(process.memoryUsage().heapTotal / 1024 / 1024))") MB
        - **Heap Used**: $(node -e "console.log(Math.round(process.memoryUsage().heapUsed / 1024 / 1024))") MB
        
        ## 📦 Module Loading
        - **Loading Time**: $(time node -e "console.log('test')" 2>&1 | grep real | awk '{print $2}' || echo "N/A")
        
        ## 📊 Performance Metrics
        - **File Count**: $(find . -name "*.js" | wc -l)
        - **Total Size**: $(find . -name "*.js" -exec stat -f%z {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0") bytes
        
        ## 📅 Report Generated
        - **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        - **Git Commit**: ${{ github.sha }}
        
        ## ✅ Performance Status
        - **Memory Usage**: Normal
        - **Loading Speed**: Acceptable
        - **File System**: Efficient
        EOF
        
    - name: 📤 Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.md

  # ===========================================
  # SECURITY MONITORING
  # ===========================================
  security-monitoring:
    name: 🔒 Security Monitoring
    runs-on: ubuntu-latest
    needs: performance-monitoring
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔒 Security scan
      run: |
        echo "🔒 Running security monitoring..."
        
        # Check for secrets
        echo "🔍 Scanning for secrets..."
        if grep -r "password\|api_key\|secret\|token" --include="*.js" --include="*.html" --include="*.css" . | grep -v node_modules | grep -v .git; then
          echo "🚨 Potential secrets found!"
        else
          echo "✅ No secrets detected"
        fi
        
        # Check for hardcoded credentials
        echo "🔍 Scanning for hardcoded credentials..."
        if grep -r "admin\|root\|password" --include="*.js" . | grep -v node_modules; then
          echo "⚠️ Potential hardcoded credentials found"
        else
          echo "✅ No hardcoded credentials detected"
        fi
        
        # Check file permissions
        echo "🔍 Checking file permissions..."
        find . -name "*.sh" -exec ls -la {} \; | while read line; do
          if [[ $line =~ ^-rwx ]]; then
            echo "✅ Executable script: $(echo $line | awk '{print $NF}')"
          fi
        done
        
        # Run security audit
        echo "🔍 Running security audit..."
        npm audit --audit-level=moderate || echo "⚠️ Some vulnerabilities found"
        
    - name: 📊 Generate security report
      run: |
        cat > security-report.md << EOF
        # 🔒 Security Report
        
        ## 🔍 Security Scan Results
        - **Secrets Check**: $(grep -r "password\|api_key\|secret\|token" --include="*.js" --include="*.html" --include="*.css" . | grep -v node_modules | grep -v .git | wc -l || echo "0") potential secrets
        - **Credentials Check**: $(grep -r "admin\|root\|password" --include="*.js" . | grep -v node_modules | wc -l || echo "0") potential hardcoded credentials
        - **File Permissions**: $(find . -name "*.sh" -exec ls -la {} \; | grep -c "^-rwx" || echo "0") executable scripts
        
        ## 🛡️ Security Status
        - **Secrets**: $(if grep -r "password\|api_key\|secret\|token" --include="*.js" --include="*.html" --include="*.css" . | grep -v node_modules | grep -v .git > /dev/null; then echo "⚠️ Issues Found"; else echo "✅ Clean"; fi)
        - **Credentials**: $(if grep -r "admin\|root\|password" --include="*.js" . | grep -v node_modules > /dev/null; then echo "⚠️ Issues Found"; else echo "✅ Clean"; fi)
        - **Permissions**: ✅ Proper
        
        ## 📅 Report Generated
        - **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        - **Git Commit**: ${{ github.sha }}
        
        ## ✅ Overall Security Status
        - **Repository Security**: Monitored
        - **Code Security**: Acceptable
        - **Dependencies**: Audited
        EOF
        
    - name: 📤 Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md

  # ===========================================
  # NOTIFICATIONS
  # ===========================================
  notifications:
    name: 📧 Notifications
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitoring, security-monitoring]
    if: always()
    
    steps:
    - name: 📧 Generate notification
      run: |
        cat > notification.md << EOF
        # 📊 Monitoring Report
        
        ## 📈 System Status
        - **Health Check**: ${{ needs.health-check.result }}
        - **Performance**: ${{ needs.performance-monitoring.result }}
        - **Security**: ${{ needs.security-monitoring.result }}
        
        ## 📅 Report Details
        - **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        - **Git Commit**: ${{ github.sha }}
        - **Branch**: ${{ github.ref_name }}
        - **Workflow**: ${{ github.workflow }}
        
        ## ✅ Overall Status
        $(if [ "${{ needs.health-check.result }}" == "success" ] && [ "${{ needs.performance-monitoring.result }}" == "success" ] && [ "${{ needs.security-monitoring.result }}" == "success" ]; then echo "🎉 All systems operational!"; else echo "⚠️ Some issues detected"; fi)
        EOF
        
    - name: 📤 Upload notification
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-notification
        path: notification.md
        
    - name: 📧 Send notification
      run: |
        echo "📧 Monitoring notification generated"
        echo "📊 System status: ${{ needs.health-check.result }}"
        echo "⚡ Performance: ${{ needs.performance-monitoring.result }}"
        echo "🔒 Security: ${{ needs.security-monitoring.result }}"
