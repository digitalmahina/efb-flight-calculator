name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '20.x'
  NPM_CACHE_KEY: 'npm-cache-${{ hashFiles(\'**/package-lock.json\') }}'

jobs:
  # ===========================================
  # LINTING AND CODE QUALITY
  # ===========================================
  lint:
    name: 🔍 Linting & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 ESLint check
      run: |
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
          npx eslint . --ext .js,.ts,.jsx,.tsx --format=stylish
        else
          echo "ESLint config not found, skipping..."
        fi
        
    - name: 🎨 Prettier check
      run: |
        if [ -f ".prettierrc" ] || [ -f "prettier.config.js" ]; then
          npx prettier --check .
        else
          echo "Prettier config not found, skipping..."
        fi
        
    - name: 🔒 Security audit
      run: npm audit --audit-level=moderate
      
    - name: 📊 Code complexity check
      run: |
        echo "Checking code complexity..."
        find . -name "*.js" -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
          lines=$(wc -l < "$file")
          if [ "$lines" -gt 500 ]; then
            echo "⚠️ Large file detected: $file ($lines lines)"
          fi
        done

  # ===========================================
  # TESTING
  # ===========================================
  test:
    name: 🧪 Testing
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🧪 Run unit tests
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No test script found, running basic syntax check..."
          find . -name "*.js" -not -path "./node_modules/*" | xargs -I {} node -c {}
        fi
        
    - name: 🧪 Run integration tests
      run: |
        if [ -f "package.json" ] && grep -q '"test:integration"' package.json; then
          npm run test:integration
        else
          echo "No integration tests found"
        fi
        
    - name: 📊 Test coverage
      run: |
        if [ -f "package.json" ] && grep -q '"coverage"' package.json; then
          npm run coverage
        else
          echo "No coverage script found"
        fi
      continue-on-error: true
      
    - name: 📤 Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  # ===========================================
  # BUILD
  # ===========================================
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build project
      run: |
        if [ -f "package.json" ] && grep -q '"build"' package.json; then
          npm run build
        else
          echo "No build script found, creating basic build..."
          mkdir -p dist
          cp -r src/* dist/ 2>/dev/null || echo "No src directory found"
          cp -r modules/* dist/ 2>/dev/null || echo "No modules directory found"
          cp index.html dist/ 2>/dev/null || echo "No index.html found"
        fi
        
    - name: 📦 Package artifacts
      run: |
        mkdir -p artifacts
        tar -czf artifacts/build-$(date +%Y%m%d-%H%M%S).tar.gz dist/ 2>/dev/null || echo "No dist directory to package"
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: artifacts/
        retention-days: 7

  # ===========================================
  # SECURITY SCAN
  # ===========================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔒 Run security scan
      run: |
        echo "Running security checks..."
        
        # Check for secrets
        if grep -r "password\|api_key\|secret\|token" --include="*.js" --include="*.html" --include="*.css" . | grep -v node_modules | grep -v .git; then
          echo "🚨 Potential secrets found in code!"
          exit 1
        fi
        
        # Check for hardcoded credentials
        if grep -r "admin\|root\|password" --include="*.js" . | grep -v node_modules; then
          echo "⚠️ Potential hardcoded credentials found"
        fi
        
        # Check file permissions
        find . -name "*.sh" -exec ls -la {} \; | while read line; do
          if [[ $line =~ ^-rwx ]]; then
            echo "✅ Executable script: $(echo $line | awk '{print $NF}')"
          fi
        done
        
    - name: 🔒 Dependency vulnerability scan
      run: npm audit --audit-level=high
      continue-on-error: true

  # ===========================================
  # DEPLOYMENT
  # ===========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build for staging
      run: |
        if [ -f "package.json" ] && grep -q '"build"' package.json; then
          npm run build
        else
          echo "Creating staging build..."
          mkdir -p dist
          cp -r . dist/ 2>/dev/null || echo "Copying files to dist"
        fi
        
    - name: 🚀 Deploy to GitHub Pages (Staging)
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        exclude_assets: |
          node_modules
          .git
          .github
          scripts
        cname: staging.efb-calculator.com
        
    - name: 📧 Notify deployment
      run: |
        echo "🚀 Staging deployment completed!"
        echo "URL: https://staging.efb-calculator.com"

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build for production
      run: |
        if [ -f "package.json" ] && grep -q '"build"' package.json; then
          npm run build
        else
          echo "Creating production build..."
          mkdir -p dist
          cp -r . dist/ 2>/dev/null || echo "Copying files to dist"
        fi
        
    - name: 🚀 Deploy to GitHub Pages (Production)
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        exclude_assets: |
          node_modules
          .git
          .github
          scripts
        cname: efb-calculator.com
        
    - name: 📧 Notify deployment
      run: |
        echo "🚀 Production deployment completed!"
        echo "URL: https://efb-calculator.com"

  # ===========================================
  # MONITORING
  # ===========================================
  monitor:
    name: 📊 Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📊 Health check
      run: |
        echo "Running health checks..."
        
        # Check if deployment was successful
        if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "✅ Staging deployment successful"
        fi
        
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Production deployment successful"
        fi
        
    - name: 📈 Performance metrics
      run: |
        echo "Collecting performance metrics..."
        
        # Basic file size analysis
        find . -name "*.js" -not -path "./node_modules/*" | while read file; do
          size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
          if [ "$size" -gt 100000 ]; then
            echo "⚠️ Large file: $file ($size bytes)"
          fi
        done
        
    - name: 📧 Send notification
      if: always()
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          echo "📧 CI/CD Pipeline completed for ${{ github.ref }}"
        else
          echo "📧 Manual deployment triggered"
        fi
