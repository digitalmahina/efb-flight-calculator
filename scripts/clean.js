#!/usr/bin/env node

/**
 * Clean Script
 * –û—á–∏—â–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');

// –§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
const filesToRemove = [
    // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ –º–æ–¥—É–ª–∏
    'modules/calculations/weather-calculations.js',
    'modules/calculations/weather-calculations-test.js',
    'modules/calculations/weather-widget.html',
    'modules/calculations/weather-widget.css',
    'modules/calculations/WEATHER_CALCULATIONS_INTEGRATION_REPORT.md',
    
    'modules/core-ui/weather-calculations-test.js',
    'modules/core-ui/weather-enhanced-calculations.js',
    'modules/core-ui/weather-widget.html',
    'modules/core-ui/WEATHER_CALCULATIONS_INTEGRATION_REPORT.md',
    
    'modules/integration/weather-calculations.js',
    'modules/integration/weather-calculations-test.js',
    'modules/integration/weather-widget.html',
    'modules/integration/weather-widget.css',
    'modules/integration/WEATHER_CALCULATIONS_INTEGRATION_REPORT.md',
    
    // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    'INTEGRATION_TEST.js',
    'integration-test.html',
    'SYSTEM_TEST.js',
    'system-test.html',
    
    // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    'SYSTEM_READINESS_REPORT.md',
    'SYSTEM_TEST_REPORT.md',
    'WEATHER_INTEGRATION_COMPLETE.md'
];

// –ü–∞–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
const directoriesToRemove = [
    'modules/calculations/tests/',
    'modules/calculations/examples/',
    'modules/calculations/weather-calculations-test.html',
    'modules/calculations/test-weather-calculations.html',
    'modules/calculations/test-weather-calculations.js'
];

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
const tempFiles = [
    '*.tmp',
    '*.log',
    '*.cache',
    '.DS_Store',
    'Thumbs.db'
];

class ProjectCleaner {
    constructor() {
        this.removedFiles = [];
        this.removedDirs = [];
        this.errors = [];
    }

    clean() {
        console.log('üßπ Cleaning project...\n');

        this.removeDuplicateFiles();
        this.removeDuplicateDirectories();
        this.removeTempFiles();
        this.cleanupEmptyDirectories();

        this.reportResults();
    }

    removeDuplicateFiles() {
        console.log('üìÑ Removing duplicate files...');
        
        for (const file of filesToRemove) {
            const fullPath = path.join(projectRoot, file);
            
            if (fs.existsSync(fullPath)) {
                try {
                    fs.unlinkSync(fullPath);
                    this.removedFiles.push(file);
                    console.log(`  ‚úÖ Removed: ${file}`);
                } catch (error) {
                    this.errors.push(`Failed to remove ${file}: ${error.message}`);
                    console.log(`  ‚ùå Failed to remove: ${file}`);
                }
            } else {
                console.log(`  ‚ö†Ô∏è  Not found: ${file}`);
            }
        }
    }

    removeDuplicateDirectories() {
        console.log('\nüìÅ Removing duplicate directories...');
        
        for (const dir of directoriesToRemove) {
            const fullPath = path.join(projectRoot, dir);
            
            if (fs.existsSync(fullPath)) {
                try {
                    if (fs.statSync(fullPath).isDirectory()) {
                        fs.rmSync(fullPath, { recursive: true, force: true });
                        this.removedDirs.push(dir);
                        console.log(`  ‚úÖ Removed directory: ${dir}`);
                    } else {
                        fs.unlinkSync(fullPath);
                        this.removedFiles.push(dir);
                        console.log(`  ‚úÖ Removed file: ${dir}`);
                    }
                } catch (error) {
                    this.errors.push(`Failed to remove ${dir}: ${error.message}`);
                    console.log(`  ‚ùå Failed to remove: ${dir}`);
                }
            } else {
                console.log(`  ‚ö†Ô∏è  Not found: ${dir}`);
            }
        }
    }

    removeTempFiles() {
        console.log('\nüóëÔ∏è  Removing temporary files...');
        
        const removeTempInDir = (dir) => {
            if (!fs.existsSync(dir)) return;
            
            const items = fs.readdirSync(dir);
            
            for (const item of items) {
                const fullPath = path.join(dir, item);
                const stat = fs.statSync(fullPath);
                
                if (stat.isDirectory()) {
                    removeTempInDir(fullPath);
                } else {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    const isTempFile = tempFiles.some(pattern => {
                        if (pattern.includes('*')) {
                            const ext = pattern.replace('*', '');
                            return item.endsWith(ext);
                        }
                        return item === pattern;
                    });
                    
                    if (isTempFile) {
                        try {
                            fs.unlinkSync(fullPath);
                            this.removedFiles.push(path.relative(projectRoot, fullPath));
                            console.log(`  ‚úÖ Removed temp file: ${path.relative(projectRoot, fullPath)}`);
                        } catch (error) {
                            console.log(`  ‚ùå Failed to remove temp file: ${path.relative(projectRoot, fullPath)}`);
                        }
                    }
                }
            }
        };
        
        removeTempInDir(projectRoot);
    }

    cleanupEmptyDirectories() {
        console.log('\nüìÇ Cleaning up empty directories...');
        
        const removeEmptyDirs = (dir) => {
            if (!fs.existsSync(dir)) return;
            
            const items = fs.readdirSync(dir);
            
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
            for (const item of items) {
                const fullPath = path.join(dir, item);
                if (fs.statSync(fullPath).isDirectory()) {
                    removeEmptyDirs(fullPath);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞ –ª–∏ –ø–∞–ø–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            const remainingItems = fs.readdirSync(dir);
            if (remainingItems.length === 0 && dir !== projectRoot) {
                try {
                    fs.rmdirSync(dir);
                    this.removedDirs.push(path.relative(projectRoot, dir));
                    console.log(`  ‚úÖ Removed empty directory: ${path.relative(projectRoot, dir)}`);
                } catch (error) {
                    console.log(`  ‚ùå Failed to remove empty directory: ${path.relative(projectRoot, dir)}`);
                }
            }
        };
        
        removeEmptyDirs(projectRoot);
    }

    reportResults() {
        console.log('\nüìä Cleanup Results:');
        console.log('='.repeat(50));
        
        if (this.removedFiles.length > 0) {
            console.log(`‚úÖ Removed ${this.removedFiles.length} files:`);
            this.removedFiles.forEach(file => console.log(`   - ${file}`));
        }
        
        if (this.removedDirs.length > 0) {
            console.log(`\n‚úÖ Removed ${this.removedDirs.length} directories:`);
            this.removedDirs.forEach(dir => console.log(`   - ${dir}`));
        }
        
        if (this.errors.length > 0) {
            console.log(`\n‚ùå ${this.errors.length} errors occurred:`);
            this.errors.forEach(error => console.log(`   - ${error}`));
        }
        
        if (this.removedFiles.length === 0 && this.removedDirs.length === 0 && this.errors.length === 0) {
            console.log('‚ú® Project is already clean!');
        }
        
        console.log('\n' + '='.repeat(50));
    }
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
const cleaner = new ProjectCleaner();
cleaner.clean();
