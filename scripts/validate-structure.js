#!/usr/bin/env node

/**
 * Validate Structure Script
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');

// –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
const expectedStructure = {
    'src/': '–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º',
    'src/core/': '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
    'src/modules/': '–ú–æ–¥—É–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
    'src/shared/': '–û–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
    'src/assets/': '–†–µ—Å—É—Ä—Å—ã (—Å—Ç–∏–ª–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)',
    'src/test/': '–¢–µ—Å—Ç—ã',
    'src/test/unit/': '–ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã',
    'src/test/integration/': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã',
    'src/test/weather/': '–¢–µ—Å—Ç—ã –ø–æ–≥–æ–¥–Ω—ã—Ö –º–æ–¥—É–ª–µ–π',
    'build/': '–°–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∫–∏',
    'scripts/': '–£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã',
    'docs/': '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
    'package.json': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
    'README.md': '–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'
};

// –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
const requiredFiles = [
    'package.json',
    'src/main.js',
    'src/index.html',
    'src/assets/styles.css',
    'src/shared/event-bus.js',
    'src/shared/utils.js',
    'src/shared/constants.js',
    'src/modules/weather-calculations.js'
];

// –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
const forbiddenDuplicates = [
    'weather-calculations.js',
    'weather-calculations-test.js',
    'weather-widget.html',
    'weather-widget.css',
    'WEATHER_CALCULATIONS_INTEGRATION_REPORT.md'
];

class StructureValidator {
    constructor() {
        this.errors = [];
        this.warnings = [];
        this.duplicates = [];
    }

    validate() {
        console.log('üîç Validating project structure...\n');

        this.checkDirectories();
        this.checkRequiredFiles();
        this.checkForDuplicates();
        this.checkPackageJson();

        this.reportResults();
        return this.errors.length === 0;
    }

    checkDirectories() {
        console.log('üìÅ Checking directory structure...');
        
        for (const [dir, description] of Object.entries(expectedStructure)) {
            const fullPath = path.join(projectRoot, dir);
            
            if (fs.existsSync(fullPath)) {
                console.log(`  ‚úÖ ${dir} - ${description}`);
            } else {
                this.errors.push(`Missing directory: ${dir} - ${description}`);
                console.log(`  ‚ùå ${dir} - ${description}`);
            }
        }
    }

    checkRequiredFiles() {
        console.log('\nüìÑ Checking required files...');
        
        for (const file of requiredFiles) {
            const fullPath = path.join(projectRoot, file);
            
            if (fs.existsSync(fullPath)) {
                console.log(`  ‚úÖ ${file}`);
            } else {
                this.errors.push(`Missing required file: ${file}`);
                console.log(`  ‚ùå ${file}`);
            }
        }
    }

    checkForDuplicates() {
        console.log('\nüîç Checking for duplicate files...');
        
        for (const filename of forbiddenDuplicates) {
            const duplicates = this.findDuplicates(filename);
            
            if (duplicates.length > 1) {
                this.duplicates.push({ filename, paths: duplicates });
                console.log(`  ‚ö†Ô∏è  Found ${duplicates.length} copies of ${filename}:`);
                duplicates.forEach(path => console.log(`     - ${path}`));
            } else if (duplicates.length === 1) {
                console.log(`  ‚úÖ ${filename} - single copy found`);
            } else {
                this.warnings.push(`No copies found of ${filename}`);
                console.log(`  ‚ö†Ô∏è  No copies found of ${filename}`);
            }
        }
    }

    findDuplicates(filename) {
        const duplicates = [];
        
        const searchInDir = (dir) => {
            if (!fs.existsSync(dir)) return;
            
            const items = fs.readdirSync(dir);
            
            for (const item of items) {
                const fullPath = path.join(dir, item);
                const stat = fs.statSync(fullPath);
                
                if (stat.isDirectory()) {
                    searchInDir(fullPath);
                } else if (item === filename) {
                    duplicates.push(path.relative(projectRoot, fullPath));
                }
            }
        };
        
        searchInDir(projectRoot);
        return duplicates;
    }

    checkPackageJson() {
        console.log('\nüì¶ Checking package.json...');
        
        const packagePath = path.join(projectRoot, 'package.json');
        
        if (!fs.existsSync(packagePath)) {
            this.errors.push('package.json not found');
            return;
        }
        
        try {
            const packageContent = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            const requiredFields = ['name', 'version', 'main', 'type', 'scripts'];
            for (const field of requiredFields) {
                if (!packageContent[field]) {
                    this.errors.push(`Missing field in package.json: ${field}`);
                } else {
                    console.log(`  ‚úÖ ${field}: ${packageContent[field]}`);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
            const requiredScripts = ['start', 'test', 'build', 'clean'];
            for (const script of requiredScripts) {
                if (!packageContent.scripts || !packageContent.scripts[script]) {
                    this.warnings.push(`Missing script in package.json: ${script}`);
                } else {
                    console.log(`  ‚úÖ script ${script}: ${packageContent.scripts[script]}`);
                }
            }
            
        } catch (error) {
            this.errors.push(`Invalid package.json: ${error.message}`);
        }
    }

    reportResults() {
        console.log('\nüìä Validation Results:');
        console.log('='.repeat(50));
        
        if (this.errors.length === 0) {
            console.log('‚úÖ All validations passed!');
        } else {
            console.log(`‚ùå Found ${this.errors.length} errors:`);
            this.errors.forEach(error => console.log(`   - ${error}`));
        }
        
        if (this.warnings.length > 0) {
            console.log(`\n‚ö†Ô∏è  Found ${this.warnings.length} warnings:`);
            this.warnings.forEach(warning => console.log(`   - ${warning}`));
        }
        
        if (this.duplicates.length > 0) {
            console.log(`\nüîÑ Found ${this.duplicates.length} duplicate files:`);
            this.duplicates.forEach(dup => {
                console.log(`   - ${dup.filename}:`);
                dup.paths.forEach(path => console.log(`     * ${path}`));
            });
        }
        
        console.log('\n' + '='.repeat(50));
    }
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const validator = new StructureValidator();
const isValid = validator.validate();

process.exit(isValid ? 0 : 1);
