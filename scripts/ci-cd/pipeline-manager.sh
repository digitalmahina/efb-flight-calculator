#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CI/CD pipeline
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/ci-cd/pipeline-manager.sh

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ CI/CD Pipeline Manager${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏${NC}"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ pipeline
show_pipeline_status() {
    echo -e "${YELLOW}üìä –°—Ç–∞—Ç—É—Å CI/CD Pipeline:${NC}"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GitHub CLI
    if command -v gh &> /dev/null; then
        echo -e "${BLUE}üîç GitHub Actions Status:${NC}"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ workflow runs
        gh run list --limit 5 --json status,conclusion,name,createdAt | jq -r '.[] | "\(.name): \(.status) (\(.conclusion // "running")) - \(.createdAt)"' 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
        
        echo ""
        echo -e "${BLUE}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ Workflows:${NC}"
        gh workflow list --json name,state | jq -r '.[] | "\(.name): \(.state)"' 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ workflows"
        
    else
        echo -e "${YELLOW}‚ö†Ô∏è  GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install gh"
        echo "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: gh auth login"
    fi
    
    echo ""
    echo -e "${BLUE}üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–µ Workflows:${NC}"
    if [ -d ".github/workflows" ]; then
        ls -la .github/workflows/ | grep -v "^total" | while read line; do
            if [[ $line =~ \.yml$ ]] || [[ $line =~ \.yaml$ ]]; then
                echo "  üìÑ $(echo $line | awk '{print $NF}')"
            fi
        done
    else
        echo "  ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è .github/workflows –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ workflow
trigger_workflow() {
    echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ Workflow${NC}"
    
    if ! command -v gh &> /dev/null; then
        echo -e "${RED}‚ùå GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install gh"
        exit 1
    fi
    
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ workflows:"
    gh workflow list --json name,id | jq -r '.[] | "\(.name) (\(.id))"' 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ workflows"
    
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ workflow –¥–ª—è –∑–∞–ø—É—Å–∫–∞: " workflow_name
    
    if [ -n "$workflow_name" ]; then
        echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ workflow: $workflow_name${NC}"
        gh workflow run "$workflow_name" 2>/dev/null || echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ workflow${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –ù–∞–∑–≤–∞–Ω–∏–µ workflow –Ω–µ —É–∫–∞–∑–∞–Ω–æ${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
view_logs() {
    echo -e "${YELLOW}üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤${NC}"
    
    if ! command -v gh &> /dev/null; then
        echo -e "${RED}‚ùå GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        exit 1
    fi
    
    echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ workflow runs:"
    gh run list --limit 10 --json databaseId,status,conclusion,name,createdAt | jq -r '.[] | "\(.databaseId): \(.name) - \(.status) (\(.conclusion // "running"))"' 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ runs"
    
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ ID run –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: " run_id
    
    if [ -n "$run_id" ]; then
        echo -e "${YELLOW}üìã –õ–æ–≥–∏ –¥–ª—è run $run_id:${NC}"
        gh run view "$run_id" --log 2>/dev/null || echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  ID run –Ω–µ —É–∫–∞–∑–∞–Ω${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è
check_deployment() {
    echo -e "${YELLOW}üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub Pages
    echo -e "${BLUE}üåê GitHub Pages Status:${NC}"
    echo "Production: https://efb-calculator.com"
    echo "Staging: https://staging.efb-calculator.com"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–ª–æ–∏
    if command -v gh &> /dev/null; then
        echo ""
        echo -e "${BLUE}üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–ª–æ–∏:${NC}"
        gh run list --workflow="deployment.yml" --limit 5 --json status,conclusion,createdAt | jq -r '.[] | "\(.createdAt): \(.status) (\(.conclusion // "running"))"' 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ–µ–≤"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–π
setup_environments() {
    echo -e "${YELLOW}üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏–π${NC}"
    
    if ! command -v gh &> /dev/null; then
        echo -e "${RED}‚ùå GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        exit 1
    fi
    
    echo "–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏–π..."
    
    # –°–æ–∑–¥–∞–µ–º staging –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    echo -e "${YELLOW}üìã –°–æ–∑–¥–∞–Ω–∏–µ staging –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
    gh api repos/digitalmahina/efb-flight-calculator/environments/staging --method PUT --field protection_rules='[]' 2>/dev/null || echo "Staging –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –°–æ–∑–¥–∞–µ–º production –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    echo -e "${YELLOW}üìã –°–æ–∑–¥–∞–Ω–∏–µ production –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
    gh api repos/digitalmahina/efb-flight-calculator/environments/production --method PUT --field protection_rules='[{"type":"required_reviewers","required_reviewers":[{"type":"User","id":1}]}]' 2>/dev/null || echo "Production –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    echo -e "${GREEN}‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
cleanup_artifacts() {
    echo -e "${YELLOW}üßπ –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤${NC}"
    
    if ! command -v gh &> /dev/null; then
        echo -e "${RED}‚ùå GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        exit 1
    fi
    
    echo "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤..."
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    gh api repos/digitalmahina/efb-flight-calculator/actions/artifacts --jq '.artifacts[] | select(.created_at < (now - 7*24*3600 | strftime("%Y-%m-%dT%H:%M:%SZ"))) | .id' | while read artifact_id; do
        if [ -n "$artifact_id" ]; then
            echo "–£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞: $artifact_id"
            gh api repos/digitalmahina/efb-flight-calculator/actions/artifacts/$artifact_id --method DELETE 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç $artifact_id"
        fi
    done
    
    echo -e "${GREEN}‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
while true; do
    echo ""
    echo -e "${BLUE}üîß CI/CD Pipeline Manager:${NC}"
    echo "1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å pipeline"
    echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç—å workflow"
    echo "3. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
    echo "4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è"
    echo "5. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    echo "6. –û—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"
    echo "7. –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏"
    echo "8. –í—ã—Ö–æ–¥"
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-8): " choice
    
    case $choice in
        1)
            show_pipeline_status
            ;;
        2)
            trigger_workflow
            ;;
        3)
            view_logs
            ;;
        4)
            check_deployment
            ;;
        5)
            setup_environments
            ;;
        6)
            cleanup_artifacts
            ;;
        7)
            echo -e "${YELLOW}üìä –ú–µ—Ç—Ä–∏–∫–∏ CI/CD:${NC}"
            echo "- Workflows: $(ls .github/workflows/*.yml 2>/dev/null | wc -l)"
            echo "- –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: $(git log -1 --pretty=format:'%h - %s (%cr)')"
            echo "- –í–µ—Ç–∫–∞: $(git branch --show-current)"
            echo "- –°—Ç–∞—Ç—É—Å: $(git status --porcelain | wc -l) –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            ;;
        8)
            echo -e "${BLUE}üëã –í—ã—Ö–æ–¥${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
            ;;
    esac
done
