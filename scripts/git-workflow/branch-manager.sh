#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç–∫–∞–º–∏
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/git-workflow/branch-manager.sh

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üåø –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ—Ç–æ–∫${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏${NC}"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ç–æ–∫
show_branch_status() {
    echo -e "${YELLOW}üìã –°—Ç–∞—Ç—É—Å –≤–µ—Ç–æ–∫:${NC}"
    echo ""
    
    # –õ–æ–∫–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏
    echo -e "${BLUE}üåø –õ–æ–∫–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏:${NC}"
    git branch -v | while read line; do
        if [[ $line =~ ^\* ]]; then
            echo -e "${GREEN}  $line${NC}"
        else
            echo "  $line"
        fi
    done
    
    echo ""
    
    # –£–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏
    echo -e "${BLUE}üåê –£–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏:${NC}"
    git branch -r | while read line; do
        echo "  $line"
    done
    
    echo ""
    
    # –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞
    CURRENT_BRANCH=$(git branch --show-current)
    echo -e "${YELLOW}üìç –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $CURRENT_BRANCH${NC}"
    
    # –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if git rev-parse --abbrev-ref --symbolic-full-name @{u} > /dev/null 2>&1; then
        UPSTREAM=$(git rev-parse --abbrev-ref --symbolic-full-name @{u})
        echo -e "${YELLOW}üîÑ Upstream: $UPSTREAM${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        BEHIND=$(git rev-list --count HEAD..$UPSTREAM 2>/dev/null || echo "0")
        AHEAD=$(git rev-list --count $UPSTREAM..HEAD 2>/dev/null || echo "0")
        
        if [ "$BEHIND" -gt 0 ]; then
            echo -e "${YELLOW}üì• –û—Ç—Å—Ç–∞–µ—Ç –Ω–∞ $BEHIND –∫–æ–º–º–∏—Ç–æ–≤${NC}"
        fi
        
        if [ "$AHEAD" -gt 0 ]; then
            echo -e "${YELLOW}üì§ –í–ø–µ—Ä–µ–¥–∏ –Ω–∞ $AHEAD –∫–æ–º–º–∏—Ç–æ–≤${NC}"
        fi
        
        if [ "$BEHIND" -eq 0 ] && [ "$AHEAD" -eq 0 ]; then
            echo -e "${GREEN}‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Upstream –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤–µ—Ç–æ–∫
cleanup_branches() {
    echo -e "${YELLOW}üßπ –û—á–∏—Å—Ç–∫–∞ –≤–µ—Ç–æ–∫...${NC}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–∏—Ç—ã—Ö –≤–µ—Ç–æ–∫
    MERGED_BRANCHES=$(git branch --merged | grep -v '\*\|main\|develop' | sed 's/^[ ]*//')
    
    if [ -z "$MERGED_BRANCHES" ]; then
        echo -e "${GREEN}‚úÖ –ù–µ—Ç –≤–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è${NC}"
        return
    fi
    
    echo -e "${YELLOW}üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–∏—Ç—ã–µ –≤–µ—Ç–∫–∏:${NC}"
    echo "$MERGED_BRANCHES"
    echo ""
    
    echo -e "${YELLOW}‚ùì –£–¥–∞–ª–∏—Ç—å —Å–ª–∏—Ç—ã–µ –≤–µ—Ç–∫–∏? (y/n)${NC}"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        echo "$MERGED_BRANCHES" | while read branch; do
            if [ -n "$branch" ]; then
                echo -e "${YELLOW}üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∏: $branch${NC}"
                git branch -d "$branch"
            fi
        done
        echo -e "${GREEN}‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–µ—Ç–æ–∫
sync_branches() {
    echo -e "${YELLOW}üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ç–æ–∫...${NC}"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    echo -e "${YELLOW}üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...${NC}"
    git fetch origin
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º main
    echo -e "${YELLOW}üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è main...${NC}"
    git checkout main
    git pull origin main
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º develop
    echo -e "${YELLOW}üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è develop...${NC}"
    git checkout develop
    git pull origin develop
    
    echo -e "${GREEN}‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ç–∫–∏
create_branch() {
    echo -e "${YELLOW}üåø –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏...${NC}"
    
    echo "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–µ—Ç–∫–∏:"
    echo "1. feature/–Ω–∞–∑–≤–∞–Ω–∏–µ"
    echo "2. release/–≤–µ—Ä—Å–∏—è"
    echo "3. hotfix/–æ–ø–∏—Å–∞–Ω–∏–µ"
    echo "4. experiment/–Ω–∞–∑–≤–∞–Ω–∏–µ"
    echo "5. custom"
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-5): " choice
    
    case $choice in
        1)
            read -p "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: " feature_name
            BRANCH_NAME="feature/$feature_name"
            BASE_BRANCH="develop"
            ;;
        2)
            read -p "–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, v1.1.0): " version
            BRANCH_NAME="release/$version"
            BASE_BRANCH="develop"
            ;;
        3)
            read -p "–û–ø–∏—Å–∞–Ω–∏–µ hotfix: " hotfix_desc
            BRANCH_NAME="hotfix/$hotfix_desc"
            BASE_BRANCH="main"
            ;;
        4)
            read -p "–ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: " exp_name
            BRANCH_NAME="experiment/$exp_name"
            BASE_BRANCH="develop"
            ;;
        5)
            read -p "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏: " custom_name
            BRANCH_NAME="$custom_name"
            read -p "–ë–∞–∑–æ–≤–∞—è –≤–µ—Ç–∫–∞ (main/develop): " BASE_BRANCH
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
            return
            ;;
    esac
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É
    echo -e "${YELLOW}üåø –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ $BRANCH_NAME –æ—Ç $BASE_BRANCH...${NC}"
    git checkout "$BASE_BRANCH"
    git pull origin "$BASE_BRANCH"
    git checkout -b "$BRANCH_NAME"
    
    echo -e "${GREEN}‚úÖ –í–µ—Ç–∫–∞ $BRANCH_NAME —Å–æ–∑–¥–∞–Ω–∞${NC}"
}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
while true; do
    echo ""
    echo -e "${BLUE}üîß –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç–∫–∞–º–∏:${NC}"
    echo "1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ—Ç–æ–∫"
    echo "2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É"
    echo "3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ç–∫–∏"
    echo "4. –û—á–∏—Å—Ç–∏—Ç—å —Å–ª–∏—Ç—ã–µ –≤–µ—Ç–∫–∏"
    echo "5. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫—É"
    echo "6. –£–¥–∞–ª–∏—Ç—å –≤–µ—Ç–∫—É"
    echo "7. –°—Ä–∞–≤–Ω–∏—Ç—å –≤–µ—Ç–∫–∏"
    echo "8. –í—ã—Ö–æ–¥"
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-8): " choice
    
    case $choice in
        1)
            show_branch_status
            ;;
        2)
            create_branch
            ;;
        3)
            sync_branches
            ;;
        4)
            cleanup_branches
            ;;
        5)
            echo -e "${YELLOW}üåø –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ç–∫–∏:${NC}"
            git branch
            read -p "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: " branch_name
            if git checkout "$branch_name"; then
                echo -e "${GREEN}‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ $branch_name${NC}"
            else
                echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏${NC}"
            fi
            ;;
        6)
            echo -e "${YELLOW}üåø –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ç–∫–∏:${NC}"
            git branch
            read -p "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: " branch_name
            if [ "$branch_name" != "main" ] && [ "$branch_name" != "develop" ]; then
                if git branch -d "$branch_name"; then
                    echo -e "${GREEN}‚úÖ –í–µ—Ç–∫–∞ $branch_name —É–¥–∞–ª–µ–Ω–∞${NC}"
                else
                    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏${NC}"
                fi
            else
                echo -e "${RED}‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É${NC}"
            fi
            ;;
        7)
            echo -e "${YELLOW}üåø –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ç–∫–∏:${NC}"
            git branch
            read -p "–ü–µ—Ä–≤–∞—è –≤–µ—Ç–∫–∞: " branch1
            read -p "–í—Ç–æ—Ä–∞—è –≤–µ—Ç–∫–∞: " branch2
            echo -e "${YELLOW}üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ $branch1 –∏ $branch2:${NC}"
            git log --oneline --graph "$branch1".."$branch2" 2>/dev/null || echo "–ù–µ—Ç —Ä–∞–∑–ª–∏—á–∏–π"
            ;;
        8)
            echo -e "${BLUE}üëã –í—ã—Ö–æ–¥${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
            ;;
    esac
done
